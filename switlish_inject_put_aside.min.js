
if (!window.SwitlishConfig) {

    window.SwitlishConfig = {	
        // not used : switlish_widget_version: "@"+"xxxxx",
        switlish_key_client: "extension",
        // not used : switlish_pop_out_on_mouse_out: false,
        switlish_client_name_list: "A trier",
        switlish_text_color: "3d3e4e",
        switlish_text_font: "Lato",
        switlish_background_color: "c0a1ff"
    };

    // -------- CUSTOM widgetType for OPTIMIZATION - COPY OF WIDGET TO AVOID LOADING SCRIPT 'switlish_widget_function.min.js' AND WAIT FOR IT
    function switlishPutAsidePopUp(event, widgetType = 'onClickExtensionPutAside') {
        event.preventDefault();
        putAsideMessageBeforeExit = true;
        switlishWidget=document.createElement('switlish-widget');
        switlishWidget.setAttribute('switlish-client-id', window.SwitlishConfig.switlish_key_client);
        switlishWidget.setAttribute('switlish-default-list-name', window.SwitlishConfig.switlish_client_name_list);
        switlishWidget.setAttribute('switlish-text-color', window.SwitlishConfig.switlish_text_color);
        switlishWidget.setAttribute('switlish-text-font', window.SwitlishConfig.switlish_text_font);
        switlishWidget.setAttribute('switlish-background-color', window.SwitlishConfig.switlish_background_color);
        switlishWidget.setAttribute('id', 'switlish-widget-id');
        switlishWidget.setAttribute('switlish-widget-type', widgetType);
        document.body.appendChild(switlishWidget);
        document.body.style.overflow="hidden";
    }
    // -------- END COPY OF WIDGET

    function isPotentialClassNameAddToCartButton (tabClassAddToCart, v) {

        let result = false;
        
        tabClassAddToCart.forEach( x => { 
            result = (v.className.indexOf(x) > -1) || result;
            if((v.className.indexOf(x) > -1)) console.log(v.textContent)
        });

    return result;
    }

    function isAddToCartButton(tabClassAddToCart, v) {
        let result = false;

        if(
            // AJOUTER + Class that indicates buying button
            (
                v.textContent.length < 200 // Pour éviter de prendre une nouvelle fois le même cf zara ou my-squash (car quand tu inject/update le dom il reboucle encore et encore)
            && isPotentialClassNameAddToCartButton(tabClassAddToCart, v)
            && ((v.textContent.trim().toUpperCase().indexOf('AJOUTER') > -1) || (v.textContent.trim().toUpperCase().indexOf('ADD TO ') > -1))
            )

            // EXPLICIT ADD TO CART WITHOUT SPECIFIC CLASS
            || (v.textContent.trim().toUpperCase() === 'AJOUTER AU PANIER')
            || (v.textContent.trim().toUpperCase() === 'ADD TO CART')
            || (v.textContent.trim().toUpperCase() === 'ADD TO BAG')
            || (v.textContent.trim().toUpperCase() === 'ADD TO BASKET')

        ) {
            result = true;
        }

        return result;
    }
    function excludeAddToCartButton (parentAddToCart) {

        // Remove hook put aside stick on top
        // # UNIQLO
        if(window.location.host === 'www.uniqlo.com' 
        && parentAddToCart.className.indexOf('pdp-product-bar') > -1) { 
            return true; 
        }

        return false;
    }

    function appendPutAsideButtonInDOM(addToCartButton) {

        var parentAddToCart = addToCartButton.parentNode;
        
        if(!excludeAddToCartButton(parentAddToCart)) {

            // Build button
            var putAsideButton = document.createElement("button");
            putAsideButton.id = 'switlish-widget' ;
            putAsideButton.style = `
            background: #c0a1ff;
            color: white;
            font-size: 14px;
            font-family: Lato,sans-serif;
            align-items: center;
            line-height: 1;
            margin-top: 0.3em;
            margin-bottom: 20px;
            opacity: 1;
            width: 100%;
            padding: 10px;
            cursor: pointer;
            `
            putAsideButton.onclick = switlishPutAsidePopUp;
            putAsideButton.className = "btn btn-cta btn--large btn--full btn--clear uppercase";

            /*// Build label + append
            putAsideButtonLabel = document.createElement("label");
            putAsideButtonLabel.style = "width: 30px;pointer-events: none;height: 30px;background-size: contain;background-image: url('https://cdn.jsdelivr.net/npm/switlish-plugin-put-aside@latest/img/heart.png');";
            putAsideButton.appendChild(putAsideButtonLabel);*/

            // Build Span + append
            putAsideButtonSpan = document.createElement("span");
            putAsideButtonSpan.textContent = "Mettre de côté";
            putAsideButton.appendChild(putAsideButtonSpan);

            // Build div
            var putAsideDiv = document.createElement("div");
            putAsideDiv.className = parentAddToCart.className;
            putAsideDiv.appendChild(putAsideButton);


            // Append Put Aside Button
            if(parentAddToCart.nodeName === 'FIELDSET') {

                parentAddToCart.appendChild(putAsideDiv);
            } else {

                parentAddToCart.parentNode.appendChild(putAsideDiv);
            }

        }
        
    }

    function childsAlreadyRegistered (elemTreatedTab, v) {

        let result = false;

        for(let j = 0; j < elemTreatedTab.length; j++) {

            let elTr = elemTreatedTab[j];
            
            v.childNodes.forEach(c => { 
                if(c === elTr) result = true; 
            });
    
        }

        return result;
    }

    function appendPutAsideButton (tabClassAddToCart, typeDetect, elemTreatedTab) {

        let result = false;
        const elems = document.querySelectorAll(typeDetect);

        for(let i = 0; i < elems.length; i++) {
            let v = elems[i];
            if(isAddToCartButton(tabClassAddToCart, v)) {

                if(elemTreatedTab.indexOf(v.parentNode) === -1) {

                    let breakLoop = false;

                    if(!childsAlreadyRegistered(elemTreatedTab, v)) {
                        
                        appendPutAsideButtonInDOM(v);
                        elemTreatedTab.push(v);
                        result = true;
                    }


                }
    
            }
        }

        return result;
    }

    const CONFIG = {

        CLASS_POTENTIAL_ADD_TO_CART: [
            'button-buy', 
            'add-button', 
            'AddToCart', 
            'add-to-cart'
        ],
        ELEMENT_TYPE: [
            'button',
            'a',
            'div'
        ]
    }

    MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
    var found = false;
    const observer = new MutationObserver(function(mutations, observer) {

        let elemTreatedTab = [];
        
        if (!document.getElementById('switlish-widget')) {
            
            CONFIG.ELEMENT_TYPE.forEach(type => {
                found = appendPutAsideButton(CONFIG.CLASS_POTENTIAL_ADD_TO_CART, type, elemTreatedTab) || found;
            });
        
        } else { 
            found = null 
        }
    });

    // define what element should be observed by the observer
    // and what types of mutations trigger the callback
    observer.observe(document, {
    subtree: true,
    childList: true,
    //...
    });

}